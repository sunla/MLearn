summary(income)
income <- sort(income)
summary(income)
head(income)
km <- kmeans(income,3,15)
km
plot(income,col = km$cluster)
points(km$centers, col = 1:3, pch = 8)
wss <- numeric(5)
for (i in 1:5) wss[i] <- sum(kmeans(income,centers = i)$withinss)
plot(1:5,wss,type="b", xlab="Number of clusters", ylab="Within groups sum of squares")
wss <- numeric(15)
for (i in 1:15) wss[i] <- sum(kmeans(income,centers = i)$withinss)
plot(1:15,wss,type="b", xlab="Number of clusters", ylab="Within groups sum of squares")
km <- kmeans(income,4,15)
km <- kmeans(income,3,15)
wss <- numeric(5)
for (i in 1:5) wss[i] <- sum(kmeans(income,centers = i)$withinss)
plot(1:5,wss,type="b", xlab="Number of clusters", ylab="Within groups sum of squares")
km <- kmeans(income,5,15)
plot(income,col = km$cluster)
points(km$centers, col = 1:3, pch = 8)
install.packages( c("e1071"),repos='http://cran.revolutionanalytics.com')
library("e1071")
sample <- read.table("sample1.csv",header=TRUE,sep=",")
getwd()
sample <- read.table("sample1.csv",header=TRUE,sep=",")
sample <- read.table("sample1.csv",header=TRUE,sep=",")
traindata <- as.data.frame(sample[1:14,])
testdata <- as.data.frame(sample[15,])
traindata
testdata
sample <- read.table("sample1.csv",header=TRUE,sep=",")
traindata <- as.data.frame(sample[1:14,])
testdata <- as.data.frame(sample[15,])
traindata
testdata
tprior <- table(traindata$Enrolls)
tprior <- tprior/sum(tprior)
tprior
ageCounts <-table(traindata[,c("Enrolls", "Age")])
ageCounts
ageCounts <- ageCounts/rowSums(ageCounts)
ageCounts
incomeCounts <- table(traindata[,c("Enrolls", "Income")])
incomeCounts <- incomeCounts/rowSums(incomeCounts)
jsCounts <- table(traindata[,c("Enrolls", "Jobsatisfaction")])
jsCounts<-jsCounts/rowSums(jsCounts)
desireCounts <- table(traindata[,c("Enrolls", "Desire")])
desireCounts <- desireCounts/rowSums(desireCounts)
ageCounts["Yes","<=30"]
trpior("Yes")
tpior("Yes")
tprior["Yes"]
tprior
pyes <- ageCounts["Yes","<=30"]*
￼incomeCounts["Yes","Medium"]*
￼jsCounts["Yes","Yes"]*
￼desireCounts["Yes","Fair"]*
￼tprior["Yes"]
pyes <- ageCounts["Yes","<=30"]*￼incomeCounts["Yes","Medium"]*￼jsCounts["Yes","Yes"]*￼desireCounts["Yes","Fair"]*￼tprior["Yes"]
pyes <- ageCounts["Yes","<=30"]*￼incomeCounts["Yes","Medium"]*￼jsCounts["Yes","Yes"]*￼desireCounts["Yes","Fair"]*￼tprior["Yes"]
pyes <- ageCounts["Yes","<=30"]*
￼incomeCounts["Yes","Medium"]*￼jsCounts["Yes","Yes"]*￼desireCounts["Yes","Fair"]*￼tprior["Yes"]
pyes <- ageCounts["Yes","<=30"]*
incomeCounts["Yes","Medium"]*
jsCounts["Yes","Yes"]*
desireCounts["Yes","Fair"]*
tprior["Yes"]
pno <- ageCounts["No","<=30"]*
incomeCounts["No","Medium"]*
jsCounts["No","Yes"]*
desireCounts["No","Fair"]*
tprior["No"]
pyes
pno
max(pyes,pno)
model <- naiveBayes(Enrolls ~.,traindata)
model
results <- predict (model,testdata)
results
levels <- c("Wow", "Good", "Bad")
ratings <- ("Bad", "Bad","Wow")
ratings <- ("Bad","Bad","Wow")
ratings <- c("Bad","Bad","Wow")
f <- factor(ratings,levels)
f
l <- list(ratings=ratings,critics=c("Siskel", "Ebert"))
l
m <- matrix(c(1:3,11:13), nrow=2,ncol=3,byrow=TRUE)
m
t <- table(dfm$factor_variable)
v <- c(1:10)
w <- c(15:24)
nw <- v+w
nw
v
w
q <- c(1:5)
nq <- v+q
nq
q
dfm <- read.table("train.csv",sep=",",header = T)
View(dfm)
View(dfm)
ndf <- subset(dfm,dfm$humidity < 40)
View(ndf)
View(ndf)
v(v<1000)
dim(dfm)
attributes(dfm)
class(dfm)
typeof(dfm)
names(dfm)
nrows(dfm)
nrow(dfm)
ncol(dfm)
range(dfm$humidity)
hist(dfm$windspeed)
plot(dfm$humidity)
plot(dfm$windspeed)
View(dfm)
View(dfm)
plot(lm(dfm$count ~ dfm$temp))
plot(dfm$temp,dfm$count)
plot(dfm$temp < 30,dfm$count)
plot(dfm$temp < 60,dfm$count)
plot(dfm$temp > 60,dfm$count)
barplot(dfm$season)
dotplot(dfm$temp)
dotplot(dfm$temp, dfm$co
dotplot(dfm$temp, dfm$count)
stem(dfm$season)
stem(dfm$temp)
stem(dfm)
stem(dfm$count)
library(lattice)
densityplot(dfm$temp)
densityplot(log(dfm$temp))
xlab="temp", col="gray")
hist(dfm$temp, breaks=5, main="Temprature distribution",
xlab="temp", col="gray")
hist(dfm$temp, breaks=100, main="Temprature distribution",
xlab="temp", col="gray")
hist(dfm$temp, breaks=120, main="Temprature distribution",
xlab="temp", col="gray")
hist(dfm$temp, breaks=10, main="Temprature distribution",
xlab="temp", col="gray")
(140-115)/(175-115)
262/(262+15)
460/1780
460/730
library("e1071")
sample <- read.table("sample1.csv",header=TRUE,sep=",")
traindata <- as.data.frame(sample[1:14,])
testdata <- as.data.frame(sample[15,])
traindata
testdata
tprior <- table(traindata$Enrolls)
tprior <- tprior/sum(tprior)
tprior
ageCounts <-table(traindata[,c("Enrolls", "Age")])
ageCounts
ageCounts <- ageCounts/rowSums(ageCounts)
ageCounts
incomeCounts <- table(traindata[,c("Enrolls", "Income")])
incomeCounts <- incomeCounts/rowSums(incomeCounts)
incomeCounts
jsCounts <- table(traindata[,c("Enrolls", "Jobsatisfaction")])
jsCounts<-jsCounts/rowSums(jsCounts)
desireCounts <- table(traindata[,c("Enrolls", "Desire")])
desireCounts <- desireCounts/rowSums(desireCounts)
pyes <- ageCounts["Yes","<=30"]*
incomeCounts["Yes","Medium"]*
jsCounts["Yes","Yes"]*
desireCounts["Yes","Fair"]*
tprior["Yes"]
pno <- ageCounts["No","<=30"]*
incomeCounts["No","Medium"]*
jsCounts["No","Yes"]*
desireCounts["No","Fair"]*
tprior["No"]
pyes
pno
max(pyes,pno)
View(testdata)
View(testdata)
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE)
library("e1071")
emctest
emctest <- emtest[1:6,1:4]
emctest <- emctest[1:6,1:4]
emtest
emctest
yprob <- table(emctest$Y)
yprob <- yprob/sum(yprob)
yprob
x1prob <- table(emctest, c("X1", "Y"))
emctest
x1prob <- table(emctest[,c("X1", "Y")])
x1prob
x1prob <- x1prob/rowsum(x1prob)
x1prob <- x1prob/rowSums(x1prob)
x1prob
x2prob <- table(emctest[,c("X2", "Y")])
x2prob <- x2prob/rowSums(x2prob)
x2prob
x3prob <- table(emctest[,c("X3", "Y")])
x3prob <- x3prob/rowSums(x3prob)
x3prob
py1 <- x1prob["1","1"] *
x1prob["0","1"] *
x1prob["0","1"] *
yprob["1"]
py0 <- x1prob["1","0"] *
x1prob["0","0"] *
x1prob["0","0"] *
yprob["0"]
max(py1, py0)
py1; py0;
max(py1, py0)
py1; py0; 4/54
py1; py0;
4/54; 1/54
max(py1, py0)
py10 <- x1prob["0","1"] *
x1prob["0","1"] *
x1prob["1","1"] *
yprob["1"]
py00 <- x1prob["0","0"] *
x1prob["0","0"] *
x1prob["1","0"] *
yprob["0"]
py10; py00; max(py10, py00)
py1 <- x1prob["1","1"] *
x2prob["0","1"] *
x3prob["0","1"] *
yprob["1"]
py0 <- x1prob["1","0"] *
x2prob["0","0"] *
x3prob["0","0"] *
yprob["0"]
py1; py0;
max(py1, py0)
4/54; 1/54
py10 <- x1prob["0","1"] *
x2prob["0","1"] *
x3prob["1","1"] *
yprob["1"]
py00 <- x1prob["0","0"] *
x2prob["0","0"] *
x3prob["1","0"] *
yprob["0"]
py10; py00; max(py10, py00)
py1; py0;
4/54; 1/54
max(py1, py0)
py10 <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"] *
yprob["1"]
py00 <- x1prob["0","0"] *
x2prob["0","0"] *
x3prob["0","1"] *
yprob["0"]
py10; py00; max(py10, py00)
4/54; 1/54
py10 <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"] *
1
py10
py10 <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"]
py10 <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"] *
yprob["1"]
py00 <- x1prob["0","0"] *
x2prob["0","0"] *
x3prob["0","1"] *
yprob["0"]
py10 <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"] *
yprob["1"]
4/54; 1/54
py10; py00; max(py10, py00)
pytest <- x1prob["1","0"] *
x2prob["1","0"] *
x3prob["1","1"]
py10
py10/pytest
.5 * 2/6 * .5
py10 / (.5 * 2/6 * .5)
model <- naiveBayes(Y ~.,emctest)
model
yprob ; x1prob ; x2prob ; x3prob
model$tables
x1testprob <- table(emctest[,c("Y", "X1")])
x1testprob <- x1prob/rowSums(x1prob)
x1testprob
# prediction for value x(1,0,0)
x1testprob <- table(emctest[,c("Y", "X1")])
x1testprob
x1testprob <- x1testprob/rowSums(x1testprob)
x1testprob
model
results <- predict (model,c("0","0","1"))
results
results <- predict (model,c(0,0,1))
results
model <- naiveBayes(Y ~.,emctest)
model
results <- predict (model,c(0,0,1))
results
testdata <- data.frame(0,0,1)
testdata
names(testdata) <- c("X1", "X2", "X3")
testdata
emctest[1,]
results <- predict (model,testdata)
results
testdata
summary(testdata)
View(emctest)
View(testdata)
View(emctest)
View(testdata)
library("e1071")
sample <- read.table("sample1.csv",header=TRUE,sep=",")
traindata <- as.data.frame(sample[1:14,])
testdata <- as.data.frame(sample[15,])
traindata
testdata
tprior <- table(traindata$Enrolls)
tprior <- tprior/sum(tprior)
tprior
ageCounts <-table(traindata[,c("Enrolls", "Age")])
ageCounts
ageCounts <- ageCounts/rowSums(ageCounts)
ageCounts
incomeCounts <- table(traindata[,c("Enrolls", "Income")])
incomeCounts <- incomeCounts/rowSums(incomeCounts)
incomeCounts
jsCounts <- table(traindata[,c("Enrolls", "Jobsatisfaction")])
jsCounts<-jsCounts/rowSums(jsCounts)
desireCounts <- table(traindata[,c("Enrolls", "Desire")])
desireCounts <- desireCounts/rowSums(desireCounts)
pyes <- ageCounts["Yes","<=30"]*
incomeCounts["Yes","Medium"]*
jsCounts["Yes","Yes"]*
desireCounts["Yes","Fair"]*
tprior["Yes"]
pno <- ageCounts["No","<=30"]*
incomeCounts["No","Medium"]*
jsCounts["No","Yes"]*
desireCounts["No","Fair"]*
tprior["No"]
pyes
pno
max(pyes,pno)
model <- naiveBayes(Enrolls ~.,traindata)
model
results <- predict (model,testdata)
results
summary(results)
results@.Data
summary(emctest)
summary(emcdata)
summary(traindata)
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE)
summary(emctest)
emctest1 <- emctest[, c(as.character(X1), as.character(X2), as.character(X3), as.character(Y))]
emctest
emctest1 <- emctest[, c(as.character(emctest$X1), as.character(emctest$X2), as.character(emctest$X3), as.character(emctest$Y))]
emctest1 <- emctest[, c(as.character("X1"), as.character(X2), as.character(X3), as.character(Y))]
emctest1 <- emctest[, c(as.character("X1"), as.character("X2"), as.character("X3"), as.character("Y"))]
emctest1
model <- naiveBayes(Y ~.,emctest1)
model
results <- predict (model,testdata)
results
testdata <- data.frame("0","0","1")
names(testdata) <- c("X1", "X2", "X3")
summary(testdata)
model <- naiveBayes(Y ~.,emctest1)
model
results <- predict (model,testdata)
results
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE, as.is = !straingsAsFactors)
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE, as.is = !stringsAsFactors)
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE, colClasses=rep("character", 4))
emctest
summary(emctest)
emctest <- read.table("TestNaive.csv", sep =",", header = TRUE, colClasses=rep("character", 4))
library("dplyr")
install.packages( c("dplyr"),repos='http://cran.revolutionanalytics.com')
library("dplyr")
emctest %>% group_by(X1) %>% tally()
emctest
emctest %>% group_by(X1,X2) %>% tally()
emctest %>% group_by(name(emctest)) %>% tally()
emctest %>% group_by(names(emctest)) %>% tally()
col <- names(emctest)
emctest %>% group_by(col) %>% tally()
col
emctest %>% group_by(X1,X2,X3) %>% tally()
emctest %>% group_by(X1,X2) %>% tally()
emctest %>% group_by(emctest[,]) %>% tally()
emctest %>% group_by(emctest[,2]) %>% tally()
emctest %>% group_by(emctest[,1]) %>% tally()
library("sqldf")
install.packages( c("sqldf"),repos='http://cran.revolutionanalytics.com')
group <- data.frame (x= sqldf("select X1,COUNT(*) from emctest"))
group <- data.frame (x= sqldf("select X1,COUNT(*) from emctest group by X1"))
library("sqldf")
library("rpart")
help("rpart")
setwd("~/Documents/R/Otto/data")
library(kernlab)
library(ggplot2)
library(e1071)
library(caret)
prod <- read.table("train.csv", header = TRUE, sep = ",")
set.seed(2335246L)
prod$group <- sample.int(100, size = dim(prod)[[1]], replace = T)
prodTrain <- subset(prod,group >80 )
y <- "target"
x <- c("feat_11", "feat_60", "feat_27", "feat_34","feat_3",
"feat_46", "feat_90", "feat_61", "feat_80", "feat_14", "feat_15",
"feat_42", "feat_30", "feat_69", "feat_36", "feat_57", "feat_25", "feat_40")
fmla <- paste(y,paste(x,collapse = "+"), sep = "~")
fmla
svmprod <- svm(fmla, prodTrain, probability = TRUE)
svmprod <- svm(target ~ feat_11, prodTrain, probability = TRUE)
svmprod <- svm(target ~ feat_11 + feat_60, prodTrain, probability = TRUE)
summary(svmprod)
fmla <- paste(y,paste(x,collapse = " + "), sep = " ~ ")
fmla
svmprod <- svm(fmla, prodTrain, probability = TRUE)
svmprod <- svm(target ~ feat_11 + feat_60 + feat_27 + feat_34 + feat_3 + feat_46 + feat_90 + feat_61 +
feat_80 + feat_14 + feat_15 + feat_42 + feat_30 + feat_69 + feat_36 + feat_57 + feat_25 +
feat_40, prodTrain, probability = TRUE)
summary(svmprod)
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
prod$id <- NULL
model <- glm (target ~ ., data = prod , family = binomial(link = "logit"))
summary(model)
model$coefficients
sort(model$coefficients)
prod$group <- NULL
model <- glm (target ~ ., data = prod , family = binomial(link = "logit"))
summary(model)
sort(model$coefficients)
sort(model$coefficients,drop = FALSE)
sort(model$coefficients)
+ feat_15   + feat_11   + feat_31   + feat_58   + feat_43 , prodTrain, probability = TRUE)
svmprod <- svm(target ~ feat_65  + feat_78    + feat_1   + feat_16   + feat_87   + feat_73   + feat_39    + feat_4 + feat_63   + feat_27   + feat_64   + feat_38   + feat_88   + feat_89   + feat_36  + feat_91 + feat_26   + feat_59   + feat_46   + feat_56    + feat_3   + feat_45  + feat_13  + feat_86  + feat_47   + feat_19    + feat_2   + feat_29   + feat_57   + feat_60   + feat_74   + feat_75
+ feat_72   + feat_35   + feat_93   + feat_68   + feat_33   + feat_90   + feat_42   + feat_69
+ feat_41   + feat_82    + feat_9   + feat_34   + feat_50   + feat_25   + feat_14   + feat_40
+ feat_15   + feat_11   + feat_31   + feat_58   + feat_43 , prodTrain, probability = TRUE)
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
model <- glm (target ~ feat_65  + feat_78    + feat_1   + feat_16   + feat_87   + feat_73   + feat_39    + feat_4 + feat_63   + feat_27   + feat_64   + feat_38   + feat_88   + feat_89   + feat_36  + feat_91 + feat_26   + feat_59   + feat_46   + feat_56    + feat_3   + feat_45  + feat_13  + feat_86  + feat_47   + feat_19    + feat_2   + feat_29   + feat_57   + feat_60   + feat_74   + feat_75
+ feat_72   + feat_35   + feat_93   + feat_68   + feat_33   + feat_90   + feat_42   + feat_69
+ feat_41   + feat_82    + feat_9   + feat_34   + feat_50   + feat_25   + feat_14   + feat_40
+ feat_15   + feat_11   + feat_31   + feat_58   + feat_43 , data = prod , family = binomial(link = "logit"))
summary(model)
## Predict on test fulltest with SVM model with default radial kernel
svmprod <- svm(target ~ . , prodTrain, probability = TRUE)
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
summary(prodTrain)
prodTrain$id <- NULL
prodTrain$group <- NULL
svmprod <- svm(target ~ . , prodTrain, probability = TRUE)
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
summary(prodTrain)
prod$pred <- predict(svmprod, prod, probability = TRUE)
prod$pred <- predict(svmprod, prod, probability = TRUE)
prod$predc <- predict(svmprod, prod, probability = TRUE)
prodTrain$pred <- NULL
summary(prodTrain)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE)
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
prodTrain$pred <- NULL
summary(prodTrain)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = polynomial)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = "polynomial")
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
prodTrain$pred <- NULL
summary(prodTrain)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = "sigmoid")
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
prodTrain$pred <- NULL
summary(prodTrain)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = "linear")
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
prodTrain$pred <- NULL
summary(prodTrain)
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = "radial basis")
svmprod <- svm(target ~ . , prodTrain, probability = TRUE, kernel = "radial")
prodTrain$pred <- predict(svmprod, prodTrain, probability = TRUE)
confusionMatrix(prodTrain$target,prodTrain$pred)
