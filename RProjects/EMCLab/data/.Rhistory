require(igraph);
sessionInfo()
require(rpart); require(rpart.plot)
play_decision <- read.table("golf.csv",header=TRUE,sep=",")
getwd()
setwd("/Users/rajeshmalpani/workspace/Data Science/EMC/data")
play_decision <- read.table("golf.csv",header=TRUE,sep=",")
play_decision
names(play_decision) <- c("Outlook", "Temperature", "Humidity", "Wind", "Play")
fit <- rpart(Play ~ Humidity + Wind + Outlook + Temperature , method="class", data=play_decision, control=rpart.control(minsplit=1))
summary(fit)
rpart.plot(fit, type=4, extra=2)
newdata <- data.frame(Outlook="rainy",Temperature="mild",Humidity="high",Wind=FALSE)
predict(fit,newdata=newdata,type="prob”)
"
,
x
predict(fit,newdata=newdata,type="prob")
fit <- rpart(Play ~ Outlook + Temperature + Humidity + Wind, method="class", data=play_decision, control=rpart.control(minsplit=1))
predict(fit,newdata=newdata,type="prob")
play_decision
summary(fit)
summary(play_decision)
newdata <- data.frame(Outlook="rainy",Temperature="mild",Humidity="high",Wind="FALSE")
predict(fit,newdata=newdata,type="prob")
newdata <- data.frame(Outlook="rainy",Temperature="mild",Humidity="high",Wind=FALSE)
newdata <- data.frame(Outlook="rain",Temperature="mild",Humidity="high",Wind=FALSE)
predict(fit,newdata=newdata,type="prob")
newdata <- data.frame(Outlook="rain",Temperature=65,Humidity=96,Wind=FALSE)
predict(fit,newdata=newdata,type="prob")
play_decision
newdata <- data.frame(Outlook="rain",Temperature=65,Humidity=96,Wind=FALSE); newdata
rpart.plot(fit, type=4, extra=2)
predict(fit,newdata=newdata,type="class")
predict(fit,newdata=newdata,type="prob")
predict(fit,newdata=newdata,type="vector")
rpart.plot(fit, type=4, extra=1)
newdata <- data.frame(Outlook="rain",Temperature=73,Humidity=96,Wind=FALSE); newdata
predict(fit,newdata=newdata,type="prob")
predict(fit,newdata=newdata,type="class")
predict(fit,newdata=newdata,type="vector")
newdata <- data.frame(Outlook="rain",Temperature=73,Humidity=82,Wind=FALSE); newdata
predict(fit,newdata=newdata,type="prob")
predict(fit,newdata=newdata,type="class")
predict(fit,newdata=newdata,type="vector")
predict(fit,newdata=newdata,type="matrix")
msales <- read.table("SalesData.csv", header = TRUE, sep = ",")
getwd()
msales <- read.table("SalesData.csv", header = TRUE, sep = ",")
require(quantmod)   # stock data sourcing package
att <- getSymbols("T", auto.assign = FALSE)
head(att)
clas(att)
class(att)
require(WDI); require(ggplot2); require(scales)
countries <- c("US", "CA", "GB", "CN", "JP", "SG", "IL")
indicators <- c("NY.GDP.PCAP.CD", "NY.GDP.MKTP.CD")
gdp <- WDI(country = countries, indicator = indicators, start = 1960, end = 2013)
head(gdp)
class(gdp)
rm(att)
msales <- read.table("sales.csv", header = TRUE, sep = ",")
head(msales)
names(msales) <- c("date", "sales")
head(msales)
hea(substr(msales$date, 0, 4))
head(substr(msales$date, 0, 4))
head$year <- substr(msales$date, 0, 4)
substr(msales$date, 0, 4)
msales[msales$date == "Sale"]
msales[,msales$date == "Sale"]
msales <- read.table("sales.csv", header = TRUE, sep = ",")
head(msales)
substr(msales$date, 0, 4)
head$year <- substr(msales$date, 0, 4)
year <- substr(msales$date, 0, 4)
cbind(msales, year)
msales <- cbind(msales, year)
head(msales)
month <- substr(msales$date, 6, 7)
head(month)
month
cbind(msales, month)
months(msales$date)
summary(msales)
msales <- cbind(msales, month)
head(msales)
summary(msales)
min(msales$year); max(msales$year)
sort(msales)
order(msales)
msales[order(year, month), ]
msales <- msales[order(year, month), ]
dim(msales)
c(rep(0,300))
sales <- c(rep(0,70))
csales <- c(rep(0,7))
msales[71:77, 2]
sales[1:70] <- msales[1:70,2]
csales[1:7] <- msales[71:77,2]
min(msales$year); max(msales$year)
sales
sales <- c(rep(0,72))
csales <- c(rep(0,5))
sales[1:72] <- msales[1:72,2]
csales[1:5] <- msales[73:77,2]
sales
sales <- ts(sales,start=1965,frequency=12)
plot(sales, type="1")
plot(sales)
summary(sales)
class(sales)
plot(sales,type="l")
par(mfrow=c(2,1))
acf(sales)
pacf(sales)
par(mfrow=c(1,1))
acf(sales)
pacf(sales)
mean(sales)
var(sales)
sales1 <- diff(sales)
m <- length(sales1)
par(mfrow=c(1,1))
plot(1:m,sales1,type="l")
par(mfrow=c(2,1))
acf(sales1)
par(mfrow=c(1,1))
acf(sales1)
acf(sales)
pacf(sales1)
pacf(sales)
summary(sales)
summary(sales); sales
sales.fit <- arima (sales, order=c(1,1,0), seasonal = list(order=c(1,1,0),period=12), include.mean=FALSE)
sales.fit
plot(sales)
plot(sales.fit)
sales.predict <- predict (sales.fit, n.ahead=12)
sales.predict
csales
sales.predict <- predict (sales.fit, n.ahead=4)
sales.predict
csales
sales.predict <- predict (sales.fit, n.ahead=5)
sales.predict
csales
par(mfrow=c(1,1))
plot (sales,xlim=c(2009.50,2011))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
plot (sales,xlim=c(1965,1971))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
lines (sales.predict$pred-2*sales.predict$se,col="red")
asales <- c(rep(0,77))
asales[1:77] <- msales[1:77,2]
lines (asales,col="brown")
par(mfrow=c(1,1))
plot (sales,xlim=c(1965,1971))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
lines (sales.predict$pred-2*sales.predict$se,col="red")
lines (asales,col="brown")
lines (asales,col="black")
asales
sales.predict
sales
csales
csales <- ts(sales,start=1971,frequency=5)
csales
csales <- c(rep(0,5))
csales[1:5] <- msales[73:77,2]
csales <- ts(csales,start=1971,frequency=5)
csales <- ts(csales,start=1971,frequency=5)
csales
sales
csales <- ts(csales,start=1971,frequency=12)
csales
asales <- ts(asales, start=1965, frequency=12)
asales
sales.predict
sales.predict$pred - 2*sales.predict$se
forbar <- matrix(x,ncol=12,byrow=TRUE)
asales[1:12,3]
msales[1:12,3]
head(msales)
msales[1:12,4]
forbar <- matrix(12,ncol=12,byrow=TRUE)
colnames(forbar)<- msales[1:12,4]
rownames(forbar)<- c("Actual","Predicted")
forbar
forbar <- matrix(2,ncol=12,byrow=TRUE)
forbar <- matrix(2,ncol=12,byrow=TRUE)
forbar
colnames(forbar)<- msales[1:12,4]
forbar
forbar <- matrix('x',ncol=12,byrow=TRUE)
colnames(forbar)<- msales[1:12,4]
colnames(forbar)<- msales[1:12,4]
forbar
forbar <- matrix(x,ncol=12,byrow=TRUE)
par(mfrow=c(1,1))
plot (asales,xlim=c(1965,1971))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
lines (sales.predict$pred-2*sales.predict$se,col="red")
par(mfrow=c(1,1))
plot (asales,xlim=c(1970,1971))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
lines (sales.predict$pred-2*sales.predict$se,col="red")
plot (asales,xlim=c(1965,1971))
lines (sales.predict$pred,col="blue")
lines (sales.predict$pred+2*sales.predict$se,col="red")
lines (sales.predict$pred-2*sales.predict$se,col="red")
require(RTextTools)
data("NYTimes", package="RTextTools")
head(NYTimes)
timesMat <- create_matrix(NYTimes$Title, removeNumbers = TRUE, stemWords = TRUE, removeSparseTerms = .998)
timesMat
head(NYTimes); dim(NYTimes)
container <- create_container(timesMat, labels=NYTimes$Topic.Code, trainSize = 1:2500, testSize = 2501:NROW(NYTimes), virgin = FALSE)
class(container)
SVM <- train_model(container = container, "SVM")        # SVM Model
GLMNET <- train_model(container = container, "GLMNET")  # Elastic Net model
SVM_Classify <- classify_model(container, SVM)          # Create a classification from the model
GLMNET_Classify <- classify_model(container, GLMNET)    # Create a classification from the model
analytis <- create_analytics(container, cbind(SVM_Classify, GLMNET_Classify))   # create analytics from the model classification
summary(analytis)
SVM_Classify@row.names
SVM_Classify@.Data
a <- c('a', 'b', 'c')
a
a[1:3]
a[3:1]
